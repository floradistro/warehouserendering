"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_components_ThreeRenderer_tsx",{

/***/ "(app-pages-browser)/./lib/norwesco-tank-model.ts":
/*!************************************!*\
  !*** ./lib/norwesco-tank-model.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDetailedNorwescoTank: function() { return /* binding */ createDetailedNorwescoTank; },\n/* harmony export */   createNorwescoTankModel: function() { return /* binding */ createNorwescoTankModel; },\n/* harmony export */   createSimpleNorwescoTank: function() { return /* binding */ createSimpleNorwescoTank; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n\n/**\n * Creates a detailed 3D model of the Norwesco 1000 gallon tank\n * Includes all visual details from the reference image\n */ function createDetailedNorwescoTank() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const { showLiquid = false, liquidLevel = 0 } = options;\n    const group = new three__WEBPACK_IMPORTED_MODULE_0__.Group();\n    // Convert dimensions from inches to feet (matching the warehouse scale)\n    // The warehouse uses feet as the base unit, not meters\n    const tankRadius = 64 / 2 / 12 // 64\" diameter = 32\" radius = 2.67 feet\n    ;\n    const tankHeight = 80 / 12 // 80\" height = 6.67 feet\n    ;\n    // Materials\n    const tankMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshPhongMaterial({\n        color: 0xe8e8e8,\n        shininess: 30,\n        transparent: false\n    });\n    const blackMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshPhongMaterial({\n        color: 0x1a1a1a,\n        shininess: 20\n    });\n    const fittingMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshPhongMaterial({\n        color: 0x333333,\n        shininess: 40\n    });\n    const markingMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshPhongMaterial({\n        color: 0xd0d0d0,\n        transparent: true,\n        opacity: 0.3\n    });\n    // Main cylindrical tank body - perfectly cylindrical like in image\n    const tankGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.CylinderGeometry(tankRadius, tankRadius, tankHeight, 64);\n    const tank = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(tankGeometry, tankMaterial);\n    tank.position.y = tankHeight / 2;\n    tank.castShadow = true;\n    tank.receiveShadow = true;\n    group.add(tank);\n    // Flat bottom\n    const bottomGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.CylinderGeometry(tankRadius, tankRadius, 0.02, 64);\n    const bottom = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(bottomGeometry, tankMaterial);\n    bottom.position.y = 0.01;\n    bottom.castShadow = true;\n    bottom.receiveShadow = true;\n    group.add(bottom);\n    // Slightly rounded top shoulder (like in image)\n    const shoulderHeight = 0.15;\n    const shoulderGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.CylinderGeometry(tankRadius * 0.5, tankRadius, shoulderHeight, 64);\n    const shoulder = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(shoulderGeometry, tankMaterial);\n    shoulder.position.y = tankHeight + shoulderHeight / 2;\n    shoulder.castShadow = true;\n    shoulder.receiveShadow = true;\n    group.add(shoulder);\n    // Top cap area (narrower like in image)\n    const capRadius = tankRadius * 0.5;\n    const capHeight = 0.3;\n    const capGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.CylinderGeometry(capRadius, capRadius, capHeight, 32);\n    const cap = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(capGeometry, tankMaterial);\n    cap.position.y = tankHeight + shoulderHeight + capHeight / 2;\n    cap.castShadow = true;\n    cap.receiveShadow = true;\n    group.add(cap);\n    // Black lid on top (like in image - simple and flat)\n    const lidRadius = capRadius * 0.9;\n    const lidGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.CylinderGeometry(lidRadius, lidRadius, 0.05, 32);\n    const lid = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(lidGeometry, blackMaterial);\n    lid.position.y = tankHeight + shoulderHeight + capHeight + 0.025;\n    lid.castShadow = true;\n    lid.receiveShadow = true;\n    group.add(lid);\n    // Two black handles/latches on lid (visible in image)\n    const handleGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry(0.08, 0.02, 0.04);\n    const handle1 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(handleGeometry, blackMaterial);\n    handle1.position.set(lidRadius * 0.6, tankHeight + shoulderHeight + capHeight + 0.06, 0);\n    handle1.castShadow = true;\n    group.add(handle1);\n    const handle2 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(handleGeometry, blackMaterial);\n    handle2.position.set(-lidRadius * 0.6, tankHeight + shoulderHeight + capHeight + 0.06, 0);\n    handle2.castShadow = true;\n    group.add(handle2);\n    // Bottom outlet fitting (dark gray, hexagonal like in image)\n    const fittingRadius = 0.04;\n    const fittingHeight = 0.06;\n    const fittingGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.CylinderGeometry(fittingRadius, fittingRadius, fittingHeight, 6);\n    const fitting = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(fittingGeometry, fittingMaterial);\n    fitting.position.set(0, fittingHeight / 2, 0);\n    fitting.castShadow = true;\n    group.add(fitting);\n    // Minimal gallon markings (subtle lines like would be molded in)\n    for(let i = 1; i <= 4; i++){\n        const markingGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.CylinderGeometry(tankRadius + 0.001, tankRadius + 0.001, 0.003, 64);\n        const marking = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(markingGeometry, markingMaterial);\n        marking.position.y = tankHeight * i / 5;\n        group.add(marking);\n    }\n    // Liquid inside tank (if specified)\n    if (showLiquid && liquidLevel > 0) {\n        const liquidHeight = tankHeight * Math.min(liquidLevel, 0.95) // Cap at 95% to show it's not overflowing\n        ;\n        const liquidMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshPhongMaterial({\n            color: 0x4488ff,\n            transparent: true,\n            opacity: 0.7,\n            shininess: 100\n        });\n        const liquidGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.CylinderGeometry(tankRadius * 0.98, tankRadius * 0.98, liquidHeight, 32);\n        const liquid = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(liquidGeometry, liquidMaterial);\n        liquid.position.y = liquidHeight / 2;\n        group.add(liquid);\n    }\n    return group;\n}\n/**\n * Creates a simplified 2D representation of the Norwesco tank\n * Used for top-down views and performance optimization\n */ function createSimpleNorwescoTank() {\n    const group = new three__WEBPACK_IMPORTED_MODULE_0__.Group();\n    // Simple cylinder for 2D view\n    const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.CylinderGeometry(0.8128, 0.8128, 0.1, 32);\n    const material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({\n        color: 0xe8e8e8,\n        opacity: 0.9,\n        transparent: true\n    });\n    const tank = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, material);\n    tank.position.y = 0.05;\n    group.add(tank);\n    // Center fitting indicator\n    const fittingGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.CylinderGeometry(0.04, 0.04, 0.11, 6);\n    const fittingMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({\n        color: 0x333333\n    });\n    const fitting = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(fittingGeometry, fittingMaterial);\n    fitting.position.y = 0.055;\n    group.add(fitting);\n    // Capacity label (visible from top)\n    const labelGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry(0.5, 0.2);\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = 256;\n    canvas.height = 128;\n    const context = canvas.getContext(\"2d\");\n    if (context) {\n        context.fillStyle = \"#e8e8e8\";\n        context.fillRect(0, 0, 256, 128);\n        context.fillStyle = \"#333333\";\n        context.font = \"bold 48px Arial\";\n        context.textAlign = \"center\";\n        context.textBaseline = \"middle\";\n        context.fillText(\"1000 GAL\", 128, 64);\n    }\n    const labelTexture = new three__WEBPACK_IMPORTED_MODULE_0__.CanvasTexture(canvas);\n    const labelMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({\n        map: labelTexture,\n        transparent: true\n    });\n    const label = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(labelGeometry, labelMaterial);\n    label.rotation.x = -Math.PI / 2;\n    label.position.y = 0.11;\n    group.add(label);\n    return group;\n}\n/**\n * Creates the Norwesco tank model based on view type\n * @param is2D - Whether to create a simplified 2D version\n * @param options - Additional options for the tank\n */ function createNorwescoTankModel() {\n    let is2D = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false, options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (is2D) {\n        return createSimpleNorwescoTank();\n    } else {\n        return createDetailedNorwescoTank(options);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/norwesco-tank-model.ts\n"));

/***/ })

});