"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_advanced-placement_ts"],{

/***/ "(app-pages-browser)/./lib/advanced-placement.ts":
/*!***********************************!*\
  !*** ./lib/advanced-placement.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdvancedPlacementManager: function() { return /* binding */ AdvancedPlacementManager; },\n/* harmony export */   getNextRotation: function() { return /* binding */ getNextRotation; },\n/* harmony export */   getPlacementConstraints: function() { return /* binding */ getPlacementConstraints; },\n/* harmony export */   getPreviousRotation: function() { return /* binding */ getPreviousRotation; },\n/* harmony export */   snapRotationToCardinal: function() { return /* binding */ snapRotationToCardinal; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _element_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element-tools */ \"(app-pages-browser)/./lib/element-tools.ts\");\n\n\nclass AdvancedPlacementManager {\n    /**\n   * Updates mouse position and calculates world position with raycasting\n   */ updateMousePosition(clientX, clientY, canvasRect) {\n        // Convert to normalized device coordinates\n        this.mouse.x = (clientX - canvasRect.left) / canvasRect.width * 2 - 1;\n        this.mouse.y = -((clientY - canvasRect.top) / canvasRect.height) * 2 + 1;\n        // Update raycaster\n        this.raycaster.setFromCamera(this.mouse, this.camera);\n        // First try to intersect with existing objects in the scene\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true);\n        if (intersects.length > 0) {\n            // Use the first intersection point\n            return intersects[0].point;\n        }\n        // Fallback to ground plane intersection\n        const intersection = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3();\n        const hit = this.raycaster.ray.intersectPlane(this.groundPlane, intersection);\n        return hit ? intersection : null;\n    }\n    /**\n   * Finds snap points near the given position with enhanced 1-foot grid and centering\n   */ findSnapPoints(position, elements, templateId) {\n        const snapPoints = [];\n        const template = _element_tools__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_TEMPLATES[templateId];\n        if (!template) return snapPoints;\n        // Enhanced 1-foot grid snap points\n        const gridX = Math.round(position.x / this.gridSize) * this.gridSize;\n        const gridZ = Math.round(position.z / this.gridSize) * this.gridSize;\n        snapPoints.push({\n            position: new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(gridX, 0, gridZ),\n            type: \"grid\",\n            confidence: 0.5,\n            description: \"Grid: \".concat(gridX, \"', \").concat(gridZ, \"'\")\n        });\n        // Element-based snap points with enhanced centering\n        for (const element of elements){\n            var _element_metadata;\n            if ((_element_metadata = element.metadata) === null || _element_metadata === void 0 ? void 0 : _element_metadata.isPreview) continue;\n            const elementPos = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(element.position.x, 0, element.position.y);\n            const distance = position.distanceTo(elementPos);\n            if (distance > this.snapTolerance * 3) continue;\n            // Enhanced wall-specific snapping with comprehensive centering\n            if (element.type === \"wall\") {\n                const wallStart = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(element.position.x, 0, element.position.y);\n                const wallEnd = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(element.position.x + element.dimensions.width, 0, element.position.y + element.dimensions.height);\n                // Calculate key points along the wall\n                const wallCenter = wallStart.clone().lerp(wallEnd, 0.5);\n                const wallQuarter1 = wallStart.clone().lerp(wallEnd, 0.25);\n                const wallQuarter3 = wallStart.clone().lerp(wallEnd, 0.75);\n                // Wall endpoints\n                if (position.distanceTo(wallStart) <= this.snapTolerance) {\n                    snapPoints.push({\n                        position: wallStart,\n                        type: \"wall-end\",\n                        element,\n                        confidence: 0.9,\n                        description: \"Wall start: \".concat(element.id.slice(0, 8), \"...\")\n                    });\n                }\n                if (position.distanceTo(wallEnd) <= this.snapTolerance) {\n                    snapPoints.push({\n                        position: wallEnd,\n                        type: \"wall-end\",\n                        element,\n                        confidence: 0.9,\n                        description: \"Wall end: \".concat(element.id.slice(0, 8), \"...\")\n                    });\n                }\n                // Wall center - HIGH PRIORITY for centering\n                if (position.distanceTo(wallCenter) <= this.snapTolerance) {\n                    snapPoints.push({\n                        position: wallCenter,\n                        type: \"wall-center\",\n                        element,\n                        confidence: 0.95,\n                        description: \"⭐ CENTERED on wall: \".concat(element.id.slice(0, 8), \"...\")\n                    });\n                }\n                // Wall quarter points for balanced placement\n                if (position.distanceTo(wallQuarter1) <= this.snapTolerance) {\n                    snapPoints.push({\n                        position: wallQuarter1,\n                        type: \"wall-quarter\",\n                        element,\n                        confidence: 0.85,\n                        description: \"Quarter point (25%) on wall: \".concat(element.id.slice(0, 8), \"...\")\n                    });\n                }\n                if (position.distanceTo(wallQuarter3) <= this.snapTolerance) {\n                    snapPoints.push({\n                        position: wallQuarter3,\n                        type: \"wall-quarter\",\n                        element,\n                        confidence: 0.85,\n                        description: \"Quarter point (75%) on wall: \".concat(element.id.slice(0, 8), \"...\")\n                    });\n                }\n                // 1-foot intervals along the wall length\n                const wallLength = wallStart.distanceTo(wallEnd);\n                const wallDirection = wallEnd.clone().sub(wallStart).normalize();\n                for(let i = 1; i < wallLength; i += 1){\n                    const intervalPoint = wallStart.clone().add(wallDirection.clone().multiplyScalar(i));\n                    if (position.distanceTo(intervalPoint) <= this.snapTolerance) {\n                        snapPoints.push({\n                            position: intervalPoint,\n                            type: \"wall-edge\",\n                            element,\n                            confidence: 0.7,\n                            description: \"\".concat(i, \"' along wall: \").concat(element.id.slice(0, 8), \"...\")\n                        });\n                    }\n                }\n                // Wall-to-wall perpendicular snapping\n                if (template.type === \"wall\") {\n                    const wallVector = wallEnd.clone().sub(wallStart).normalize();\n                    const perpendicular = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(-wallVector.z, 0, wallVector.x);\n                    // Check for perpendicular attachment points\n                    const attachPoint1 = wallStart.clone().add(perpendicular.clone().multiplyScalar(template.defaultDimensions.width));\n                    const attachPoint2 = wallEnd.clone().add(perpendicular.clone().multiplyScalar(template.defaultDimensions.width));\n                    if (position.distanceTo(attachPoint1) <= this.snapTolerance) {\n                        snapPoints.push({\n                            position: attachPoint1,\n                            type: \"corner\",\n                            element,\n                            normal: perpendicular,\n                            confidence: 0.85\n                        });\n                    }\n                    if (position.distanceTo(attachPoint2) <= this.snapTolerance) {\n                        snapPoints.push({\n                            position: attachPoint2,\n                            type: \"corner\",\n                            element,\n                            normal: perpendicular,\n                            confidence: 0.85\n                        });\n                    }\n                }\n            }\n            // Element center snapping\n            if (distance <= this.snapTolerance) {\n                snapPoints.push({\n                    position: elementPos,\n                    type: \"element-center\",\n                    element,\n                    confidence: 0.7\n                });\n            }\n        }\n        // Sort by confidence (highest first)\n        return snapPoints.sort((a, b)=>b.confidence - a.confidence);\n    }\n    /**\n   * Gets the best snap point from available options\n   */ getBestSnapPoint(snapPoints) {\n        return snapPoints.length > 0 ? snapPoints[0] : null;\n    }\n    /**\n   * Creates preview element with proper positioning and rotation\n   */ createPreviewElement(templateId, position) {\n        let rotation = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, snapPoint = arguments.length > 3 ? arguments[3] : void 0;\n        var _snapPoint_element;\n        const template = _element_tools__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_TEMPLATES[templateId];\n        if (!template) return null;\n        let finalPosition = position.clone();\n        let finalRotation = rotation;\n        // Apply snap point positioning\n        if (snapPoint) {\n            finalPosition = snapPoint.position.clone();\n            // Auto-rotate based on snap context\n            if (snapPoint.normal && template.type === \"wall\") {\n                const angle = Math.atan2(snapPoint.normal.z, snapPoint.normal.x);\n                finalRotation = angle;\n            }\n        }\n        // Ensure element is at ground level\n        finalPosition.y = 0;\n        return {\n            id: \"preview-element\",\n            type: template.type,\n            position: {\n                x: finalPosition.x,\n                y: finalPosition.z,\n                z: finalPosition.y\n            },\n            dimensions: {\n                width: template.defaultDimensions.width,\n                height: template.defaultDimensions.height,\n                depth: template.defaultDimensions.depth || 8\n            },\n            color: template.defaultColor,\n            material: template.material,\n            rotation: finalRotation,\n            metadata: {\n                ...template.metadata,\n                isPreview: true,\n                snapPoint: snapPoint === null || snapPoint === void 0 ? void 0 : snapPoint.type,\n                snapElement: snapPoint === null || snapPoint === void 0 ? void 0 : (_snapPoint_element = snapPoint.element) === null || _snapPoint_element === void 0 ? void 0 : _snapPoint_element.id\n            }\n        };\n    }\n    /**\n   * Validates placement based on constraints\n   */ validatePlacement(element, existingElements, constraints) {\n        const errors = [];\n        for (const constraint of constraints){\n            switch(constraint.type){\n                case \"wall-to-wall\":\n                    // Check if wall connects to another wall\n                    const nearbyWalls = existingElements.filter((el)=>{\n                        var _el_metadata;\n                        return el.type === \"wall\" && !((_el_metadata = el.metadata) === null || _el_metadata === void 0 ? void 0 : _el_metadata.isPreview) && this.getElementDistance(element, el) < 2;\n                    });\n                    if (nearbyWalls.length === 0) {\n                        errors.push(\"Wall must connect to another wall\");\n                    }\n                    break;\n                case \"door-in-wall\":\n                case \"window-in-wall\":\n                    // Check if door/window is placed in a wall\n                    const hostWall = existingElements.find((el)=>{\n                        var _el_metadata;\n                        return el.type === \"wall\" && !((_el_metadata = el.metadata) === null || _el_metadata === void 0 ? void 0 : _el_metadata.isPreview) && this.isElementInsideWall(element, el);\n                    });\n                    if (!hostWall) {\n                        errors.push(\"\".concat(element.type, \" must be placed in a wall\"));\n                    }\n                    break;\n                case \"ground-only\":\n                    if (element.position.z !== 0) {\n                        errors.push(\"Element must be placed on the ground\");\n                    }\n                    break;\n            }\n        }\n        return {\n            valid: errors.length === 0,\n            errors\n        };\n    }\n    /**\n   * Helper: Calculate distance between elements\n   */ getElementDistance(el1, el2) {\n        const pos1 = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(el1.position.x, 0, el1.position.y);\n        const pos2 = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(el2.position.x, 0, el2.position.y);\n        return pos1.distanceTo(pos2);\n    }\n    /**\n   * Helper: Check if element is inside a wall\n   */ isElementInsideWall(element, wall) {\n        const elementPos = new three__WEBPACK_IMPORTED_MODULE_1__.Vector2(element.position.x, element.position.y);\n        const wallStart = new three__WEBPACK_IMPORTED_MODULE_1__.Vector2(wall.position.x, wall.position.y);\n        const wallEnd = new three__WEBPACK_IMPORTED_MODULE_1__.Vector2(wall.position.x + wall.dimensions.width, wall.position.y);\n        // Check if element position is on the wall line (with tolerance)\n        const distToWall = elementPos.distanceToSquared(wallStart.lerp(wallEnd, 0.5));\n        return distToWall < (wall.dimensions.height / 2) ** 2;\n    }\n    /**\n   * Update camera reference\n   */ updateCamera(camera) {\n        this.camera = camera;\n    }\n    /**\n   * Update scene reference\n   */ updateScene(scene) {\n        this.scene = scene;\n    }\n    constructor(camera, scene){\n        this.camera = camera;\n        this.scene = scene;\n        this.raycaster = new three__WEBPACK_IMPORTED_MODULE_1__.Raycaster();\n        this.mouse = new three__WEBPACK_IMPORTED_MODULE_1__.Vector2();\n        this.groundPlane = new three__WEBPACK_IMPORTED_MODULE_1__.Plane(new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 1, 0), 0);\n        this.snapTolerance = 1.5 // feet - tighter for precise 1-foot grid\n        ;\n        this.gridSize = 1.0 // feet - 1-foot grid intervals\n        ;\n    }\n}\n/**\n * PLACEMENT CONSTRAINTS DEFINITIONS\n */ function getPlacementConstraints(templateId) {\n    const template = _element_tools__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_TEMPLATES[templateId];\n    if (!template) return [];\n    const constraints = [\n        {\n            type: \"ground-only\"\n        } // All elements must be on ground\n    ];\n    switch(template.type){\n        case \"wall\":\n            // Walls should connect to other walls (except first wall)\n            constraints.push({\n                type: \"wall-to-wall\"\n            });\n            break;\n        case \"door\":\n        case \"window\":\n            // Doors and windows must be placed in walls\n            constraints.push({\n                type: template.type === \"door\" ? \"door-in-wall\" : \"window-in-wall\"\n            });\n            break;\n    }\n    return constraints;\n}\n/**\n * ROTATION UTILITIES\n */ function getNextRotation(currentRotation) {\n    let step = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Math.PI / 2;\n    return (currentRotation + step) % (Math.PI * 2);\n}\nfunction getPreviousRotation(currentRotation) {\n    let step = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Math.PI / 2;\n    return (currentRotation - step + Math.PI * 2) % (Math.PI * 2);\n}\nfunction snapRotationToCardinal(rotation) {\n    const cardinals = [\n        0,\n        Math.PI / 2,\n        Math.PI,\n        3 * Math.PI / 2\n    ];\n    let closest = cardinals[0];\n    let minDiff = Math.abs(rotation - closest);\n    for (const cardinal of cardinals){\n        const diff = Math.abs(rotation - cardinal);\n        if (diff < minDiff) {\n            minDiff = diff;\n            closest = cardinal;\n        }\n    }\n    return closest;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/advanced-placement.ts\n"));

/***/ })

}]);